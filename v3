import arcpy
import pandas as pd
from openpyxl import load_workbook
from openpyxl.styles import PatternFill


def get_county_list(county_feature_class):
    """Query the county feature class to get a list of all county names."""
    county_list = []
    if arcpy.Exists(county_feature_class):
        with arcpy.da.SearchCursor(county_feature_class, ['County Name']) as cursor:
            for row in cursor:
                county_list.append(row[0])  # Add county name to the list
    else:
        arcpy.AddError(f"County feature class does not exist: {county_feature_class}")
    return county_list


class Toolbox(object):
    def __init__(self):
        """Define the toolbox (the name of the toolbox is the name of the .pyt file)."""
        self.label = "Data Analysis Toolbox"
        self.alias = "data_analysis_toolbox"

        # List of tool classes associated with this toolbox
        self.tools = [DataExtractionTool]


class DataExtractionTool(object):
    def __init__(self):
        """Define the tool (tool name is the name of the class)."""
        self.label = "Data Extraction and Merging Tool"
        self.description = "Extracts data from multiple feature layers, combines them, and applies conditional formatting."
        self.canRunInBackground = False

    def getParameterInfo(self):
        """Define parameter definitions"""
        params = []

        # Input feature layers as multiple input parameters
        param1 = arcpy.Parameter(
            displayName="Feature Layers",
            name="feature_layers",
            datatype="DEFeatureClass",
            parameterType="Required",
            direction="Input",
            multiValue=True  # Allows multiple inputs
        )
        params.append(param1)

        # Output path parameter
        param2 = arcpy.Parameter(
            displayName="Output File Path",
            name="output_path",
            datatype="DEFile",
            parameterType="Required",
            direction="Output"
        )
        params.append(param2)

        # Query the county feature class to get a list of counties dynamically
        county_feature_class = r"C:\Users\braed\OneDrive\Documents\ArcGIS\Packages\Project Draft_0b91e9\counties.gdb\Counties"  # Replace with your path
        county_list = get_county_list(county_feature_class)

        # Dropdown for County selection
        param3 = arcpy.Parameter(
            displayName="Select County",
            name="county_name",
            datatype="GPString",
            parameterType="Required",
            direction="Input"
        )
        param3.filter.type = "ValueList"
        param3.filter.list = county_list  # Populate with the list of counties from the feature class
        params.append(param3)

        # Dropdown for Race selection (this is optional, and you can add your race categories here)
        param4 = arcpy.Parameter(
            displayName="Select Race",
            name="specific_race_filter",
            datatype="GPString",
            parameterType="Optional",
            direction="Input"
        )
        param4.filter.type = "ValueList"
        param4.filter.list = ['Native American', 'Asian', 'African American', 'Hispanic or Latino', 'Native Hawaiian/Polynesian', 'Two or more', 'White', 'Other']  # Replace with your actual race categories
        params.append(param4)

        return params

    def execute(self, parameters, messages):
        """The source code of the tool."""
        # Unpack parameters
        feature_layers = parameters[0].values  # List of feature layer paths
        output_path = parameters[1].valueAsText
        county_name = parameters[2].valueAsText  # Selected county
        specific_race_filter = parameters[3].valueAsText  # Selected race filter

        # Initialize an empty list to hold DataFrames
        dataframes = []

        # Load each feature layer into a DataFrame and append it to the list
        for layer_path in feature_layers:
            arcpy.AddMessage(f"Loading data from {layer_path}...")
            data = []
            fields = ['County Name', 'Race']  # Modify these fields based on your feature layer schema
            with arcpy.da.SearchCursor(layer_path, fields) as cursor:
                for row in cursor:
                    data.append(row)

            if data:
                df = pd.DataFrame(data, columns=fields)
                dataframes.append(df)
            else:
                arcpy.AddWarning(f"No data found in {layer_path}.")

        # Combine all DataFrames into one (using concat to stack them vertically)
        if dataframes:
            combined_df = pd.concat(dataframes, ignore_index=True)
            arcpy.AddMessage("Data successfully combined from all feature layers.")

            # Filter by selected county
            combined_df = combined_df[combined_df['County Name'] == county_name]

            # If specific race filter is selected, apply the filter
            if specific_race_filter:
                combined_df = combined_df[combined_df['Race'] == specific_race_filter]

            # Save combined data to the output path
            if output_path.endswith('.xlsx'):
                with pd.ExcelWriter(output_path, engine='openpyxl') as writer:
                    combined_df.to_excel(writer, index=False, sheet_name='Combined Data')

                # Optional: Apply conditional formatting
                wb = load_workbook(output_path)
                ws = wb['Combined Data']
                fill = PatternFill(start_color='FFFF00', end_color='FFFF00', fill_type='solid')
                for row in ws.iter_rows(min_row=2, max_row=ws.max_row, min_col=1, max_col=ws.max_column):
                    for cell in row:
                        cell.fill = fill
                wb.save(output_path)

                arcpy.AddMessage(f"Combined data saved to {output_path} as an Excel file.")
            elif output_path.endswith('.csv'):
                combined_df.to_csv(output_path, index=False)
                arcpy.AddMessage(f"Combined data saved to {output_path} as a CSV file.")
            else:
                arcpy.AddError("Unsupported file format. Use .xlsx or .csv.")
        else:
            arcpy.AddError("No data was found in the provided feature layers.")

        return
