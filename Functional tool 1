# -*- coding: utf-8 -*-
import arcpy
import pandas as pd
from openpyxl import load_workbook
from openpyxl.styles import PatternFill
from openpyxl.utils import get_column_letter
import os


def get_county_list(county_feature_class):
    """Query the county feature class to get a list of all county names."""
    county_list = []
    if arcpy.Exists(county_feature_class):
        with arcpy.da.SearchCursor(county_feature_class, ['County_Name']) as cursor:
            for row in cursor:
                county_list.append(row[0])  # Add county name to the list
    else:
        arcpy.AddError(f"County feature class does not exist: {county_feature_class}")
    return county_list


class Toolbox(object):
    def __init__(self):
        """Define the toolbox (the name of the toolbox is the name of the .pyt file)."""
        self.label = "Data Analysis Toolbox"
        self.alias = "data_analysis_toolbox"
        self.tools = [DataExtractionTool]


class DataExtractionTool(object):
    def __init__(self):
        """Define the tool (tool name is the name of the class)."""
        self.label = "Data Extraction and Merging Tool"
        self.description = "Extracts data from multiple feature layers, combines them, and applies conditional formatting."
        self.canRunInBackground = False

    def getParameterInfo(self):
        """Define parameter definitions."""
        params = []

        # Feature layers input
        param1 = arcpy.Parameter(
            displayName="Feature Layers",
            name="feature_layers",
            datatype="DEFeatureClass",
            parameterType="Required",
            direction="Input",
            multiValue=True
        )
        params.append(param1)

        # Output folder
        param2 = arcpy.Parameter(
            displayName="Output Folder",
            name="output_folder",
            datatype="DEFolder",
            parameterType="Required",
            direction="Output"
        )
        params.append(param2)

        # County dropdown
        county_feature_class = r"C:\Users\braed\OneDrive\Documents\ArcGIS\Packages\Project Draft_0b91e9\counties.gdb\Counties_ExportFeatures/County_Name"
        county_list = get_county_list(county_feature_class)
        param3 = arcpy.Parameter(
            displayName="Select County",
            name="county_name",
            datatype="GPString",
            parameterType="Required",
            direction="Input"
        )
        param3.filter.type = "ValueList"
        param3.filter.list = county_list
        params.append(param3)

        # Race filter dropdown
        param4 = arcpy.Parameter(
            displayName="Select Race(s)",
            name="specific_race_filter",
            datatype="GPString",
            parameterType="Optional",
            direction="Input",
            multiValue=True
        )
        param4.filter.type = "ValueList"
        param4.filter.list = [
            'Native American', 'Asian', 'African American', 'Hispanic or Latino',
            'Native Hawaiian/Polynesian', 'Two or more', 'White', 'Other'
        ]
        params.append(param4)

        return params

    def execute(self, parameters, messages):
        """The source code of the tool."""
        feature_layers = parameters[0].values
        output_folder = parameters[1].valueAsText
        county_name = parameters[2].valueAsText
        specific_race_filter = parameters[3].values

        # Validate and create output directory
        if not os.path.exists(output_folder):
            os.makedirs(output_folder)

        dataframes = []

        for layer_path in feature_layers:
            arcpy.AddMessage(f"Loading data from {layer_path}...")
            if not arcpy.Exists(layer_path):
                arcpy.AddWarning(f"Feature layer does not exist: {layer_path}")
                continue

            field_names = [field.name for field in arcpy.ListFields(layer_path)]
            expected_fields = ['County_Name'] + (specific_race_filter or [])
            fields_to_extract = [field for field in expected_fields if field in field_names]

            data = []
            with arcpy.da.SearchCursor(layer_path, fields_to_extract) as cursor:
                for row in cursor:
                    data.append(row)

            if data:
                df = pd.DataFrame(data, columns=fields_to_extract)
                dataframes.append(df)
            else:
                arcpy.AddWarning(f"No data found in {layer_path}.")

        if dataframes:
            combined_df = pd.concat(dataframes, ignore_index=True)
            arcpy.AddMessage("Data successfully combined from all feature layers.")
            combined_df = combined_df[combined_df['County_Name'] == county_name]

            if specific_race_filter:
                combined_df = combined_df[['County_Name'] + specific_race_filter]

            output_path = os.path.join(output_folder, "Combined_Data.xlsx")
            with pd.ExcelWriter(output_path, engine='openpyxl') as writer:
                combined_df.to_excel(writer, index=False, sheet_name='Combined Data')

            wb = load_workbook(output_path)
            ws = wb['Combined Data']

            for col_index in range(2, ws.max_column + 1):
                col_letter = get_column_letter(col_index)
                values = [cell.value for cell in ws[col_letter][1:] if isinstance(cell.value, (int, float))]

                if not values:
                    continue

                max_val = max(values)
                min_val = min(values)

                for row_index, cell in enumerate(ws[col_letter][1:], start=2):
                    if isinstance(cell.value, (int, float)):
                        if cell.value == max_val:
                            cell.fill = PatternFill(start_color='00FF00', end_color='00FF00', fill_type='solid')
                        elif cell.value == min_val:
                            cell.fill = PatternFill(start_color='FF0000', end_color='FF0000', fill_type='solid')

            diff_col = ws.max_column + 1
            ws.cell(row=1, column=diff_col, value="% Difference")
            for row_index in range(2, ws.max_row + 1):
                row_values = [
                    ws.cell(row=row_index, column=i).value for i in range(2, ws.max_column)
                    if isinstance(ws.cell(row=row_index, column=i).value, (int, float))
                ]
                if len(row_values) >= 2:
                    max_val = max(row_values)
                    min_val = min(row_values)
                    if min_val != 0:
                        percentage_diff = ((max_val - min_val) / min_val) * 100
                        ws.cell(row=row_index, column=diff_col, value=percentage_diff)

            wb.save(output_path)
            arcpy.AddMessage(f"Combined data saved to {output_path} as an Excel file.")
        else:
            arcpy.AddError("No data was found in the provided feature layers.")

        return
